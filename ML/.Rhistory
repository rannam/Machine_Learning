which(M[,1]>0.9, arr.ind=T)
M <- abs(cor(mtcars))
diag(M) <- 0
which(M[,1]>0.9, arr.ind=T)
which(M[,1]>0.8, arr.ind=T)
which(M[,1]>0.85, arr.ind=T)
m1 <- lm(mpg ~ factor(am), data = mtcars)
m1
summary(m1)
M[,1]>0.85
M[,1]*100
mtcars$am <- as.factor(mtcars$am)
m2 <- lm(mpg ~ cyl+disp+wt+am, data = mtcars)
summary(m2)
summary(m2)
summary(m1)
summary(m2)
anova(m1,m2)
m2 <- lm(mpg ~ factor(cyl)+disp+wt+am, data = mtcars)
anova(m1,m2)
summary(m2)
m3 <- lm(mpg ~ ., data = mtcars)
summary(m3)
anova(m1,m2,m3)
m2 <- lm(mpg ~ factor(cyl)+disp+am, data = mtcars)
summary(m2)
summary(m1)
exer <- read.csv("pml-training.csv")
str(exer)
cols1 <- grep("timestamp", colnames(exer))
cols1
colnames(exer(cols1))
colnames(exer[,cols1])
cols1 <- grep(c("x","X", "timestamp", colnames(exer))
colnames(exer[,cols1])
cols1
cols1 <- grep(c("x","X", "timestamp", colnames(exer))
)
cols1 <- grep(c("x","X", "timestamp"), colnames(exer))
sum(exer[,3])
dim(exer)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
valid_sum_flag[i] <- data.frame(is.nan(sum(exer[,i])))
}
valid_sum_flag <- 0
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag <- data.frame(NULL)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(training[,i])
}
#valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
dim(exer)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
#valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i]))
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i]))
}
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i]))
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
#valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i]))
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i])))
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i])))
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(as.numeric(exer[,i])))
}
valid_sum_flag
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
sum(exer[,3])
sum(as.numeric(exer[,3]))
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- is.nan(sum(exer[,i]))
}
valid_sum_flag
valid_sum_flag <- c(159,1)
for (i in 1:159){
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i] <- sum(exer[,i])
}
valid_sum_flag
NA_cols <- is.nan(valid_sum_flag)
NA_cols
NA_cols <- valid_sum_flag=="NA"
NA_cols
NA_cols <- valid_sum_flag!="NA"
NA_cols
colnames(exer[,NA_cols])
colnames(exer[,NA_cols==TRUE])
colnames(exer[,NA_cols=="TRUE"])
temp <- exer[,NA_cols=="TRUE"]
is.na("A")
is.na("NA")
is.nan("NA")
is.nan(NA)
is.na(NA)
temp <- colnames(exer[,!is.na(NA_cols)])
temp
head(exer[,temp])
exer <- read.csv("pml-training.csv")
valid_sum_flag <- c(159,1)
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
valid_sum_flag[i] <- sum(exer[,i])
}
valid_sum_flag <- c(159,2)
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,2] <- is.numeric(exer[,i])
}
valid_sum_flag <- c(159,2)
valid_sum_flag
dim(valid_)
dim(valid_sum_flag)
valid_sum_flag <- data.frame(matrix(nrow = 159,ncol = 2))
dim(valid_sum_flag)
valid_sum_flag
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,2] <- is.numeric(exer[,i])
}
valid_sum_flag <- data.frame(matrix(nrow = 159,ncol = 1))
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
#valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,2] <- is.numeric(exer[,i])
}
valid_sum_flag
valid_sum_flag <- c(159,1)
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
#valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,2] <- is.numeric(exer[,i])
}
valid_sum_flag <- c(159,1)
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
#valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,1] <- is.numeric(exer[,i])
}
valid_sum_flag <- matrix(nrow = 159,ncol=1)
for (i in 1:159){
#if (class(exer[,i])=="factor"){
#       exer[,i] <- as.numeric(exer[,i])
#}
#valid_sum_flag[i,1] <- sum(exer[,i])
valid_sum_flag[i,1] <- is.numeric(exer[,i])
}
sum(valid_sum_flag)
valid_sum_flag <- matrix(nrow = 159,ncol=2)
for (i in 1:159){
valid_sum_flag[i,1] <- is.numeric(exer[,i])
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i,2] <- sum(exer[,i])
}
NA_cols <- valid_sum_flag[,2]!="NA" & valid_sum_flag[,1]!=TRUE
NA_cols
sum(NA_cols)
NA2 <- valid_sum_flag[,1]!=TRUE
NA2
valid_sum_flag
NA_cols <- !is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]!=TRUE
NA_cols
is.na(valid_sum_flag[159,2])
valid_sum_flag[159,1]!=TRUE
valid_sum_flag[159,1]!=1
valid_sum_flag[159,1]!="TRUE"
NA_cols <- !is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]!="TRUE"
NA_cols
sum(NA_cols)
is.na(valid_sum_flag[3,2])
temp <- colnames(exer[,NA_cols])
dim(temp)
temp
. + 10
sum(., 10)
head(exer$kurtosis_roll_dumbbell)
class(exer$kurtosis_roll_dumbbell)
class(exer$kurtosis_roll_belt)
head(exer$kurtosis_roll_belt)
class(training$kurtosis_roll_belt)
exer <- read.csv("pml-training.csv")
str(exer)
class(exer$kurtosis_roll_belt)
is.numeric(exer$kurtosis_roll_belt)
valid_sum_flag <- matrix(nrow = 159,ncol=2)
for (i in 1:159){
valid_sum_flag[i,1] <- is.numeric(exer[,i])
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i,2] <- sum(exer[,i])
}
NA_cols <- !is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]!="TRUE"
NA_cols
valid_sum_flag
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]!="TRUE")
NA_cols
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]="TRUE")
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]=="TRUE")
NA_cols
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
NA_cols
sum(NA_cols)
temp <- colnames(exer[,NA_cols])
temp
length(NA_cols)
temp <- colnames(exer[,NA_cols==TRUE])
temp
colnames(exer)
temp <- NULL
temp <- colnames(exer[,NA_cols==TRUE])
temp
length(temp)
length(NA_cols==TRUE)
sum(NA_cols==TRUE)
valid_sum_flag <- matrix(nrow = 160,ncol=2)
for (i in 1:160){
valid_sum_flag[i,1] <- is.numeric(exer[,i])
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i,2] <- sum(exer[,i])
}
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
temp <- colnames(exer[,NA_cols])
NA_cols
temp
sum(NA_cols)
exer <- read.csv("pml-training.csv")
str(exer)
valid_sum_flag <- matrix(nrow = 160,ncol=2)
for (i in 1:160){
valid_sum_flag[i,1] <- is.numeric(exer[,i])
if (class(exer[,i])=="factor"){
exer[,i] <- as.numeric(exer[,i])
}
valid_sum_flag[i,2] <- sum(exer[,i])
}
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
sum(NA_cols)
temp <- colnames(exer[,NA_cols])
NA_cols
length(NA_cols)
length(temp)
sum(NA_cols)
temp
data_filtered <- cbind(exer[,NA_cols],exer[,160])
colnames(data_filtered)
data_filtered <- c(exer[,NA_cols],exer[,160])
colnames(data_filtered)
data_filtered <- exer[,NA_cols]
data_filtered$classe <- exer$classe
colnames(data_filtered)
data_filtered <- data_filtered[,-1]
colnames(data_filtered)
head(data_filtered)
dim(data_filtered)
data_filtered <- exer[,NA_cols]
data_filtered$classe <- exer$classe
colnames(data_filtered)
data_filtered <- data_filtered[,-c(1,2)]
colnames(data_filtered)
head(exer[,temp])
dim(data_filtered)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- exer[inTrain,]
testing <- exer[-inTrain,]
library(caret)
set.seed(32323)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- exer[inTrain,]
testing <- exer[-inTrain,]
library(caret)
modelFit <- train(classe ~ ., data = training, method="rpart")
fancyRpartPlot(modelFit$finalModel)
exer1 <- read.csv("pml-training.csv")
data_filtered <- exer[,NA_cols]
data_filtered$classe <- exer1$classe
colnames(data_filtered)
data_filtered <- data_filtered[,-c(1,2)]
head(exer[,temp])
dim(data_filtered)
set.seed(32323)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- exer[inTrain,]
testing <- exer[-inTrain,]
library(caret)
modelFit <- train(classe ~ ., data = training, method="rpart")
fancyRpartPlot(modelFit$finalModel)
head(data_filtered)
head(training)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- exer[inTrain,]
testing <- exer[-inTrain,]
head(training)
temp <- colnames(exer[,NA_cols])
data_filtered <- exer[,NA_cols]
data_filtered$classe <- exer1$classe
colnames(data_filtered)
data_filtered <- data_filtered[,-c(1,2)]
head(exer[,temp])
head(data_filtered)
dim(data_filtered)
set.seed(32323)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- exer[inTrain,]
testing <- exer[-inTrain,]
head(training)
inTrain <- createDataPartition(y=data_filtered$classe, p=0.75, list = FALSE)
training <- data_filtered[inTrain,]
testing <- data_filtered[-inTrain,]
head(training)
library(caret)
modelFit <- train(classe ~ ., data = training, method="rpart")
fancyRpartPlot(modelFit$finalModel)
prediction <- predict(modelFit, newdata=testing)
table(prediction, testing$classe)
confusionMatrix(prediction, testing$classe)
modelFit <- train(classe ~ ., data = training, method="rf")
modelFit <- train(classe ~ ., data = training, method="rf",ntree=100, importance=TRUE)
library(randomForest)
model2 <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
prediction <- predict(model2, newdata=testing, type = "class")
confusionMatrix(prediction, testing$classe)
dim(training)
dim(testing)
model2
varImpPlot(model2,)
training <- read.csv("pml-training.csv")
training <- training[,c(44, 66, 67, 123, 160)]
testing <- read.csv("pml-testing.csv")
testing <- testing[,c(44, 66, 67, 123)]
library(caret)
model3 <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
model3
test_given <- read.csv("pml-testing.csv")
test_given_filtered <- test_given[,NA_cols]
colnames(test_given)
colnames(test_given_filtered)
test_given_filtered <- test_given_filtered[,-c(1,2)]
colnames(test_given_filtered)
prediction2 <- predict(model2, newdata=test_given_filtered, type = "class")
prediction2
pml_write_files(prediction2)
getwd()
training_given <- read.csv("pml-training.csv")
valid_sum_flag <- matrix(nrow = 160,ncol=2)
for (i in 1:160){
valid_sum_flag[i,1] <- is.numeric(training_given[,i])
if (class(training_given[,i])=="factor"){
training_given[,i] <- as.numeric(training_given[,i])
}
valid_sum_flag[i,2] <- sum(training_given[,i])
}
NA_cols <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
valid_columns <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
valid_columns <- (!is.na(valid_sum_flag[,2]) & valid_sum_flag[,1]==TRUE)
train_given_filtered <- training_given[,valid_columns]
train_given_filtered$classe <- training_given$classe
train_given_filtered <- train_given_filtered[,-c(1,2)]
set.seed(32323)
inTrain  <- createDataPartition(y=train_given_filtered$classe, p=0.75, list = FALSE)
training <- train_given_filtered[inTrain,]
testing  <- train_given_filtered[-inTrain,]
library(randomForest)
model <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
model
prediction <- predict(model, newdata=testing, type = "class")
predictino
prediction
confusionMatrix(prediction, testing$classe)
head(train_given_filtered)
training_given <- read.csv("pml-training.csv")
train_given_filtered$classe <- training_given$classe
train_given_filtered <- train_given_filtered[,-c(1,2)]
set.seed(32323)
inTrain  <- createDataPartition(y=train_given_filtered$classe, p=0.75, list = FALSE)
training <- train_given_filtered[inTrain,]
testing  <- train_given_filtered[-inTrain,]
head(training)
library(randomForest)
model <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
model
prediction <- predict(model, newdata=testing, type = "class")
confusionMatrix(prediction, testing$classe)
test_given <- read.csv("pml-testing.csv")
test_given_filtered <- test_given[,valid_columns]
test_given_filtered <- test_given_filtered[,-c(1,2)]
prediction2 <- predict(model, newdata=test_given_filtered, type = "class")
prediction2
confusionMatrix(prediction, testing$classe)
fancyRpartPlot(model$finalModel)
model
fancyRpartPlot(model$finalModel)
library(randomForest)
model <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
fancyRpartPlot(model$finalModel)
getTree(model, 10, labelVar = TRUE)
plot(model)
legend("top", colnames(model$err.rate))
legend("top", colnames(model$err.rate), col=1:5, cex=0.8, fill=1:5)
plot(model)
legend("top", colnames(model$err.rate), col=1:5, cex=0.8, fill=1:5)
model
summary(model)
getTree(model, 10, labelVar = TRUE)
model
model <- randomForest(classe ~ ., data = training, ntree=100, importance=TRUE)
model
confusionMatrix(prediction, testing$classe)
with(testing, table(prediction, classe))
predcmat <- with(testing, table(prediction, classe))
sum(diag(predcmat))/sum(as.vector(predcmat))
plot(model)
legend("top", colnames(model$err.rate), col=1:5, cex=0.8, fill=1:5)
varImpPlot(model,)
and the column is numeric
getwd()
varImpPlot(model, sort=TRUE, n.var=min(20, nrow(model$importance)))
